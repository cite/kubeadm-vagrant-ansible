---
- name: Ensure no_proxy env is set
  when: proxy == true
  lineinfile:
    path: /root/.bashrc
    line: "export no_proxy='.{{ domain }},localhost,{% for node in groups['etcd-ip'] %}{{ node }}{% if not loop.last %},{% endif %}{% endfor %}'"
  tags: [kubeadm]

- name: Ensure to pass bridged IPv4 traffic to iptables chains
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: 1
    sysctl_set: yes
    state: present
    reload: yes
  tags: [kubeadm]

- name: Ensure depdencies are installed
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - apt-transport-https
    - ca-certificates
  tags: [kubeadm]

- name: Add Google GPG key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present
  register: add_repository_key
  ignore_errors: true
  tags: [kubeadm]

- name: Ensure Kubernetes repo is available
  apt_repository:
    repo: 'deb http://apt.kubernetes.io/ {{ kube_channel }} main'
    filename: kubernetes
    state: present
  tags: [kubeadm]

- name: apt-get clean
  command: apt-get clean
  tags: [kubeadm]

- name: apt-get update
  command: apt-get update
  tags: [kubeadm]

- name: Installing Kubelets and Kubeadm
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - kubelet={{ kubelet_version }}
    - kubeadm={{ kubeadm_version }}
  tags: [kubeadm]
  
- name: Ensure to replace bashrc for $app_user
  copy:
    src: /root/.bashrc
    dest: /home/{{ app_user }}/.bashrc
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: 0744
  tags: [kubeadm]

- name: Ensure Kubelet Unitfile is setup with cgroup defined
  template:
    src: roles/kubeadm/templates/kubeadm.conf.j2
    dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    owner: root
    group: root
    mode: 0644
  tags: [kubeadm]

- name: Ensure systemd is reloaded
  systemd: daemon_reload=yes
  tags: [kubeadm]

- name: Ensure kubelet has restarted
  systemd:
    state: restarted
    name: kubelet
  tags: [kubeadm]

- name: Ensure to create the Kubeadm configdirectory
  file: path={{ kubeadm_config_dir }} state=directory
  when: inventory_hostname in groups['master']
  tags: [kubeadm]

- name: Copy kubeadm.conf to /etc/kubeadm directory
  when: inventory_hostname in groups['master']
  template:
    src: "/vagrant/ansible/roles/kubeadm/templates/config.yml.j2"
    dest: "{{ kubeadm_config_dir }}/config.yml"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: 0644
  tags: [kubeadm]

- name: Ensure Kubernetes master is set to defaultvalues
  shell: "kubeadm reset"
  tags: [kubeadm]

- name: Init Kubernetes cluster
  when: inventory_hostname in groups['master']
  shell: kubeadm init --config {{ kubeadm_config_dir}}/config.yml 
  tags: [kubeadm]

- name: Ensure to create the Kubernetes configdirectory for $app_user
  file: path=/home/{{ app_user }}/.kube/ state=directory
  when: inventory_hostname in groups['master']
  tags: [kubeadm]

- name: Copy admin.conf to /home/{{ app_user }}/.kube directory
  when: inventory_hostname in groups['master']
  copy:
    src: "{{ kubectl_config }}"
    dest: "/home/{{ app_user }}/.kube/config"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: 0744
  tags: [kubeadm]

- name: Ensure to create the Kubernetes configdirectory for root
  file: path=/root/.kube/ state=directory
  when: inventory_hostname in groups['master']
  tags: [kubeadm]

- name: Copy admin.conf to /root/.kube directory
  when: inventory_hostname in groups['master']
  copy:
    src: "{{ kubectl_config }}"
    dest: "/root/.kube/config"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: 0744
  tags: [kubeadm]

- name: Ensure Kubernetes nodes are set to defaultvalues
  when: inventory_hostname in groups['nodes']
  shell: "kubeadm reset"
  tags: [kubeadm]

- name: Ensure nodes are connected to the Kubernetes API
  when: inventory_hostname in groups['nodes']
  shell: kubeadm join --token {{ kube_token }} {{ kube_master_ip }}:6443 --discovery-token-unsafe-skip-ca-verification
  tags: [kubeadm]

- name: insert/update "Match User" configuration block in /etc/ssh/sshd_config
  when: inventory_hostname in groups['master']
  blockinfile:
    path: /home/{{ app_user }}/.bashrc
    block: |
      source <(kubectl completion bash)
      function k-sys() {
        alias k="kubectl --namespace kube-system"
        printf "\n${red}kubectl --namespace kube-system active\n\n${reset}"
      }
      function k-pub() {
        alias k="kubectl --namespace kube-public"
        printf "\n${green}kubectl --namespace kube-public active\n\n${reset}"
      }
      function k-def() {
        alias k="kubectl"
        printf "\n${green}kubectl without namespace active\n\n${reset}"
      }
      function k-nodes() {
        for i in kube-{1..3}; do
          printf "${yellow}item: $i:${reset}\n"
          kubectl describe node $i.foo.io | grep -A4 "Allocated resources:"
        done
      }
  tags: [kubeadm]

- name: Start Flannel...
  when: inventory_hostname in groups['master']
  shell: "kubectl apply -f /vagrant/ansible/deployments/flannel.yml"
  tags: [kubeadm]

